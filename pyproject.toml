
[project]
name = "sdss-mangadap"
description = "MaNGA Data Analysis Pipeline"
readme = "README.md"
dynamic = ["version"]
authors = [
    { name = "SDSS-IV/MaNGA Data Team", email = "westfall@ucolick.org" }
]
license = {file = "LICENSE.md"}
keywords = [
    "sdss",
    "manga",
    "astronomy",
    "spectroscopy",
    "galaxy",
    "galaxies",
    "data analysis",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.11,<3.14"
dependencies = [ 
    "requests>=2.25",
    "ipython>=7.20",
    "configobj>=5.0.6",
    "numpy>=1.24",
    "scipy>=1.9",
    "matplotlib>=3.7",
    "astropy>=6.0",
    "shapely>=2.0",
    "pydl>=1.0",
    "ppxf==8.1.0",
    "cvxopt>=1.3",
    "vorbin==3.1.5",
]

[project.optional-dependencies]
test = [
    "pytest>=7.1.0",
    "pytest-astropy",
    "tox",
    "pytest-cov",
    "coverage",
]
docs = [
    "sphinx>6,<8",
    "docutils<0.22",
    "sphinx-automodapi",
    "sphinx_rtd_theme>3.0",
]
dev = [
    "pytest>=7.1.0",
    "pytest-astropy",
    "tox",
    "pytest-cov",
    "coverage",
    "sphinx>6,<8",
    "docutils<0.22",
    "sphinx-automodapi",
    "sphinx_rtd_theme>3.0",
]

[project.urls]
Repository = "https://github.com/sdss/mangadap"
Documentation = "https://sdss-mangadap.readthedocs.io/"

[project.scripts]

construct_dapall = "mangadap.scripts.construct_dapall:ConstructDapAll.entry_point"
dap_calculate_covariance  = "mangadap.scripts.calculate_covariance:CalculateCovariance.entry_point"
dap_find_repeat_observations = "mangadap.scripts.find_repeat_observations:FindRepeatObservations.entry_point"
dap_fit_residuals = "mangadap.scripts.fit_residuals:FitResiduals.entry_point"
dap_plate_fit_qa = "mangadap.scripts.plate_fit_qa:PlateFitQA.entry_point"
dap_ppxffit_qa = "mangadap.scripts.ppxffit_qa:PpxfFitQA.entry_point"
dap_status = "mangadap.scripts.dap_status:DapStatus.entry_point"
dap_template_flux_norm = "mangadap.scripts.template_flux_norm:TemplateFluxNorm.entry_point"
dapall_qa = "mangadap.scripts.dapall_qa:DapAllQA.entry_point"
manga_dap = "mangadap.scripts.manga_dap:MangaDap.entry_point"
manga_dap_inspector = "mangadap.scripts.manga_dap_inspector:MangaDapInspector.entry_point"
manga_synth_datacube = "mangadap.scripts.manga_synth_datacube:MangaSynthDatacube.entry_point"
rundap = "mangadap.scripts.rundap:RunDap.entry_point"
spotcheck_dap_maps = "mangadap.scripts.spotcheck_dap_maps:SpotcheckDapMaps.entry_point"
write_dap_config = "mangadap.scripts.write_dap_config:WriteDapConfig.entry_point"

[build-system]
requires = [
    "setuptools",
    "setuptools_scm",
    "wheel",
    "oldest-supported-numpy",
    "cython>=0.29.14"
]
build-backend = 'setuptools.build_meta'

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages]
find = {}

[tool.setuptools_scm]
version_file = "mangadap/version.py"

[tool.pytest.ini_options]
minversion = 7.1
testpaths = [
    "mangadap",
]

[tool.coverage]

    [tool.coverage.run]
        omit = [
            "mangadap/_astropy_init*",
            "mangadap/conftest.py",
            "mangadap/*setup_package*",
            "mangadap/tests/*",
            "mangadap/*/tests/*",
            "mangadap/extern/*",
            "mangadap/version*",
            "*/mangadap/_astropy_init*",
            "*/mangadap/conftest.py",
            "*/mangadap/*setup_package*",
            "*/mangadap/tests/*",
            "*/mangadap/*/tests/*",
            "*/mangadap/extern/*",
            "*/mangadap/version*",
        ]

    [tool.coverage.report]
        exclude_lines = [
            "pragma: no cover",
            "except ImportError",
            "raise AssertionError",
            "raise NotImplementedError",
            "'def main(.*):'",
            "pragma: py{ignore_python_version}",
            "def _ipython_key_completions_",
        ]
